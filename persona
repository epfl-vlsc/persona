#!/usr/bin/env python3

import argparse
import importlib
import os
import sys

from runtime import local_runtime
from runtime import dist_runtime


def load_modules():
  module_dir = os.path.dirname(os.path.realpath(__file__))
  dirs = os.listdir(module_dir + '/modules')
  mods = {}
  # load submodules into dict
  # submodules must have entry.py with 2 functions
  # get_args(subparser) which fills out its required args
  # run(args) which actually runs it
  for d in dirs:
    if not os.path.isdir(module_dir + '/modules/'+d):
      continue
    if d.startswith('_') or d.startswith('common'):
      continue
    # e.g modules.snap_align.entry
    path = 'modules.' + d + '.entry'
    mod = importlib.import_module(path)
    mods[d] = mod
  return mods

def get_args(modules):

  parent_parser = argparse.ArgumentParser(description="Persona -- High-Performance Bioinformatics",
                                          formatter_class=argparse.ArgumentDefaultsHelpFormatter, add_help=False)

  parser = argparse.ArgumentParser()

  subparsers = parser.add_subparsers(help="Available modules; use $ persona <command> -h for details", dest='command')

  # have each submodule define its own args
  # this is all for local execution
  for name, mod in modules.items():
    helpmsg = mod.get_tooltip()
    module_subparser = subparsers.add_parser(name, help=helpmsg, parents=[parent_parser])
    if len(mod.get_services()) is 1:
      module_service = mod.get_services()[0]
      module_service.add_graph_args(parser=module_subparser)
      module_service.add_run_args(parser=module_subparser)
      local_runtime.add_default_module_args(parser=module_subparser)
    else:
      module_subparsers = module_subparser.add_subparsers(help="Available services in module: ", dest="service")
      for module_service in mod.get_services():
        service_shortname = module_service.get_shortname()
        service_parser = module_subparsers.add_parser(service_shortname)
        module_service.add_graph_args(parser=service_parser)
        module_service.add_run_args(parser=service_parser)
        local_runtime.add_default_module_args(parser=service_parser)
    module_subparser.set_defaults(func=local_runtime.execute)

  # TODO args and implementation for distributed execution
  dist_subparser = subparsers.add_parser("dist", help="Run a TF server and execute a service pulling from shared queues. Not normally called directly.")
  #dist_subparser = subparsers.add_parser("dist", add_help=False)
  dist_subparsers = dist_subparser.add_subparsers(help="Dist modules:", dest='dist_command')

  for name, mod in modules.items():
    helpmsg = mod.get_tooltip()
    module_subparser = dist_subparsers.add_parser(name, help=helpmsg)
    if len(mod.get_services()) is 1:
      module_service = mod.get_services()[0]
      module_service.add_graph_args(parser=module_subparser)
      module_subparser.add_argument("-T", "--task-index", type=int, required=True, help="TF Cluster task index")
      module_subparser.add_argument("-C", "--cluster-def", required=True, nargs='+', help="TF Cluster definition")
      #module_service.add_run_args(parser=module_subparser)
    else:
      module_subparsers = module_subparser.add_subparsers(help="Available services in module: ", dest="service")
      for module_service in mod.get_services():
        service_shortname = module_service.get_shortname()
        service_parser = module_subparsers.add_parser(service_shortname)
        module_service.add_graph_args(parser=service_parser)
        service_parser.add_argument("-T", "--task-index", type=int, required=True, help="TF Cluster task index")
        service_parser.add_argument("-C", "--cluster-def", required=True, nargs='+', help="TF Cluster definition")
        #module_service.add_run_args(parser=service_parser)
    module_subparser.set_defaults(func=dist_runtime.execute)

  setup_subparser = subparsers.add_parser("setup_cluster", help="Map a multi-service Persona graph onto a Kubernetes cluster")
  # TODO define args and input formats for the cluster setup

  submit_subparser = subparsers.add_parser("submit", help="Submit an AGD dataset for processing on a cluster")
  submit_subparser.add_argument('agd_metadata_file', metavar='dataset', help="AGD dataset to submit")
  submit_subparser.add_argument('endpoint', metavar='endpoint', help="Endpoint provided by setup_cluster")

  args = parser.parse_args()
  return args

if __name__ == "__main__":
  if (len(sys.argv) == 1):
    msg = (
         "              ___                                 \n"
         "-. .-.   .   / _ \___ _ __ ___  ___  _ __   __ _  .-. .-.   .\n"
         "||\|||\ /|  / /_)/ _ \ '__/ __|/ _ \| '_ \ / _` | |||\|||\ /|\n"
         "|/ \|||\|| / ___/  __/ |  \__ \ (_) | | | | (_| | ||/ \|||\||\n"
         "~   `-~ `- \ /   \___|_|  |___/\___/|_| |_|\__,_| -`   `-~ `-\n"
    )
    print(msg)
    print("Persona -- High-Performance Bioinformatics")
    print("Use $ persona -h to see available options\n")
  else:
    modules = load_modules()
    args = get_args(modules)
    #print(args)
    print(os.getpid())
    args.func(args, modules)
